{"version":3,"sources":["services/heightWeight.js","App.js","serviceWorker.js","index.js"],"names":["convertInchesToFriendly","heightInches","inches","concat","Math","floor","App","_useState","useState","_useState2","Object","slicedToArray","selectedRace","setSelectedRace","_useState3","_useState4","heightWeightData","setHeightWeightData","calcHeightWeight","value","injectedRoller","roller","DiceRoller","race","races","heightModifier","roll","total","newHeight","baseHeight","newWeight","weightMultiplier","baseWeight","height","friendlyHeight","weight","getHeightWeight","react_default","a","createElement","className","onChange","event","target","map","index","key","name","type","onClick","role","aria-label","href","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"21CAGA,SAASA,EAAwBC,GAC/B,IAAMC,EAASD,EAAe,GAAf,IAAAE,OAAwBF,EAAe,GAAvC,KAA+C,GAC9D,SAAAE,OAAUC,KAAKC,MAAMJ,EAAe,IAApC,KAAAE,OAA2CD,GCuD9BI,MAxDf,WAAe,IAAAC,EAC2BC,mBAAS,MADpCC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACNK,EADMH,EAAA,GACQI,EADRJ,EAAA,GAAAK,EAEmCN,mBAAS,MAF5CO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAENE,EAFMD,EAAA,GAEYE,EAFZF,EAAA,GAIb,SAASG,EAAiBC,GACxBF,EAAoBE,EDDxB,SAAyBP,EAAcQ,GACrC,IAAMC,EAASD,GAAkB,IAAIE,aAC/BC,EAAOC,EAAMZ,GAEba,EAAiBJ,EAAOK,KAAKH,EAAKE,gBAAgBE,MAClDC,EAAYH,EAAiBF,EAAKM,WAElCC,EAAYL,EADOJ,EAAOK,KAAKH,EAAKQ,kBAAkBJ,MACNJ,EAAKS,WAE3D,MAAO,CACLC,OAAQL,EACRM,eAAgBlC,EAAwB4B,GACxCO,OAAQL,GCXoBM,CAAgBjB,GAAS,MAQvD,OACEkB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAAA,UAAQE,SAVhB,SAAoBC,GAClB7B,EAAgB6B,EAAMC,OAAOxB,OAC7BD,EAAiBwB,EAAMC,OAAOxB,SAStBkB,EAAAC,EAAAC,cAAA,UAAQpB,MAAM,IAAd,iBACCK,EAAMoB,IAAI,SAACrB,EAAMsB,GAAP,OACTR,EAAAC,EAAAC,cAAA,UAAQO,IAAKD,EAAO1B,MAAO0B,GACxBtB,EAAKwB,UAKb/B,EACCqB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,UAAQS,KAAK,SAASC,QAAS,kBAAM/B,EAAiBN,KACpDyB,EAAAC,EAAAC,cAAA,QAAMW,KAAK,MAAMC,aAAW,WAA5B,kBAKJd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,YAAOvB,EAAiBkB,iBAE1BG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,YAAOvB,EAAiBmB,OAAxB,WAIJ,MAENE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,KAAGa,KAAK,qDAAR,uBC1CYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtB,EAAAC,EAAAC,cAACqB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c1139287.chunk.js","sourcesContent":["import { DiceRoller } from 'rpg-dice-roller';\nimport races from './races.json';\n\nfunction convertInchesToFriendly(heightInches) {\n  const inches = heightInches % 12 ? ` ${heightInches % 12}\"` : '';\n  return `${Math.floor(heightInches / 12)}'${inches}`;\n}\n\nfunction getHeightWeight(selectedRace, injectedRoller) {\n  const roller = injectedRoller || new DiceRoller();\n  const race = races[selectedRace];\n\n  const heightModifier = roller.roll(race.heightModifier).total;\n  const newHeight = heightModifier + race.baseHeight;\n  const weightMultiplier = roller.roll(race.weightMultiplier).total;\n  const newWeight = heightModifier * weightMultiplier + race.baseWeight;\n\n  return {\n    height: newHeight,\n    friendlyHeight: convertInchesToFriendly(newHeight),\n    weight: newWeight\n  };\n}\n\nexport { convertInchesToFriendly, getHeightWeight, races };\n","import React, { useState } from 'react';\nimport './App.css';\nimport { getHeightWeight, races } from './services/heightWeight';\n\nfunction App() {\n  const [selectedRace, setSelectedRace] = useState(null);\n  const [heightWeightData, setHeightWeightData] = useState(null);\n\n  function calcHeightWeight(value) {\n    setHeightWeightData(value ? getHeightWeight(value) : null);\n  }\n\n  function selectRace(event) {\n    setSelectedRace(event.target.value);\n    calcHeightWeight(event.target.value);\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"MainGroup\">\n        <div className=\"Input\">\n          <label>Select Race:</label>\n          <select onChange={selectRace}>\n            <option value=\"\">(select race)</option>\n            {races.map((race, index) => (\n              <option key={index} value={index}>\n                {race.name}\n              </option>\n            ))}\n          </select>\n        </div>\n        {heightWeightData ? (\n          <div className=\"ResultGroup\">\n            <div className=\"ResultRefresh\">\n              <button type=\"button\" onClick={() => calcHeightWeight(selectedRace)}>\n                <span role=\"img\" aria-label=\"Refresh\">\n                  ðŸ”ƒ\n                </span>\n              </button>\n            </div>\n            <div className=\"Result\">\n              <div className=\"ResultRow\">\n                <label>Height:</label>\n                <span>{heightWeightData.friendlyHeight}</span>\n              </div>\n              <div className=\"ResultRow\">\n                <label>Weight:</label>\n                <span>{heightWeightData.weight} lbs</span>\n              </div>\n            </div>\n          </div>\n        ) : null}\n      </div>\n      <div className=\"ViewSource\">\n        <a href=\"https://github.com/dprothero/5e-character-details\">View source code</a>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}